import polyglot.ext.esj.primitives.*;
import polyglot.ext.esj.tologic.*;

import java.util.HashSet;
import java.util.ArrayList;

public class Test ensures (x > 0) {
    
    protected int x;
    protected int y;
    protected Node root;

    public Test(int x, int y, Node root){
	super();
	this.x = x;
	this.y = y;
	this.root = root;
    }
    
    public int x() { return x; }
    public int y() { return y; }
    public void x(int v) { this.x = v; }
    public void y(int v) { this.y = v; }

    function public HashSet<Node> nodes() {
	root.*(left+right)
    }

    function public boolean repOk() {
	//x == 2 * x_old
	//this.y() == 2 * this.x() 
	//this.y == 2 * this.x 
	//this.x == 2 * this.x_old
	//no Node n | n == n.left()
	//no int i | i <= 0    
	//root.^(left+right).contains(root)
	//!root.children().contains(root)
	//no Node n | n.^(left+right).contains(n)
	//all Node n | all Node x | x.children().contains(n)
	//all int i | i < 0
	//all int i | all int j | j < i
	all Node n | n.children().contains(n)
	}

    public void m1()
	ensures repOk() {
	
	System.out.println();
    }

    public String toString() { return "(" + x + "," + y + ")"; }

    public static void main(String[] args) {
	LogMap.SolverOpt_debug(true);

	Node n4 = new Node(4, 4, null, null);	
	Node n5 = new Node(5, 5, null, null);	
	Node n2 = new Node(2, 2, n4, n5);	
	Node n3 = new Node(3, 3, null, null);	
	Node n1 = new Node(1, 1, n2, n3);
	Test t1 = new Test(13,10,n1);
	System.out.println(t1);
	//t1.m1();
	System.out.println(t1);
	System.out.println(n1.children());
	System.out.println(t1.root.children());
	System.out.println(t1.nodes());
	System.out.println(t1.nodes_log());
	System.out.println(t1.repOk_log());
    }

}
