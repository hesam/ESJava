import polyglot.ext.esj.primitives.*;
import polyglot.ext.esj.tologic.*;

public class Node
{
    spec public Integer value;
    spec public Color color;
    spec public Node left;
    spec public Node right;
    spec public Node parent;

    public Node(Integer value, Node left, Node right) {
	this(value, Color.BLACK, left, right);
    }

    public Node(Integer value, Color color, Node left, Node right) {
        this.value = value;
        this.color = color;
        this.left = left;
        this.right = right;
        if (left != null) left.parent = this;
        if (right != null) right.parent = this;
        this.parent = null;
    }

    public void value(Integer v) { this.value = v; }
    public void color(Color c) { this.color = c; }
    public void left(Node l) { this.left = l; }
    public void right(Node r) { this.right = r; }
    public void parent(Node p) { this.parent = p; }


    spec public ESJSet<Node> children() { this.(left+right) }

    spec public ESJSet<Node> descendants() { this.^(left+right) }

    spec public ESJSet<Node> leftDescendants() { this.left.*(left+right) }

    spec public ESJSet<Node> rightDescendants() { this.right.*(left+right) }

    spec public ESJSet<Node> ancestors() { this.^parent }

    spec public ESJSet<Node> thisAndAncestors() { this.*parent }

    spec public ESJSet<Node> blackAncestors() { 
	{ Node n : thisAndAncestors() | n.color == Color.BLACK }
    }

    public Node grandparent() {
        assert parent != null; // Not the root node
        assert parent.parent != null; // Not child of root
        return parent.parent;
    }

    public Node sibling() {
        assert parent != null; // Root node has no sibling
        if (this == parent.left)
            return parent.right;
        else
            return parent.left;
    }

    public Node uncle() {
        assert parent != null; // Root node has no uncle
        assert parent.parent != null; // Children of root have no uncle
        return parent.sibling();
    }


    public boolean equals(Object n) { return n instanceof Node &&  value == ((Node)n).value; }

    public int hashCode() { return value; }

    public String toString() { 
	return (color == Color.RED ? "[R]" : "") + "Node(" + value + ")";
    }

}
