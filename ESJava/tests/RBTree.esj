import polyglot.ext.esj.primitives.*;
import polyglot.ext.esj.tologic.*;

import java.util.HashSet;
import java.util.Random;

public class RBTree 
    ensures isRBTree()
{

    private static final int INDENT_STEP = 4;
    private static int MAX_SIZE = 0;
    private static boolean TEST_DELETE = true; 

    spec public Node root;

    public RBTree() { root = null; }

    public void root(Node r) { this.root = r; }
 
    spec public ESJSet<Node> nodes() { root.*(left+right) }

    spec public ESJSet<Node> leaves() 
    { { Node n : nodes() | (n.left == null || n.right == null) }  }

    spec public ESJSet<Integer> nodeValues() { this.nodes().<value }

    spec public boolean isRBTree() {
	redsChildren() && eqBlacks() && rootBlack() && isBinarySearchTree()
    }

    spec public boolean isBinarySearchTree() {
	isAcyclic() && parentDef() && isValidBinarySearch() 
    }

    spec public boolean rootBlack() { this.root == null || this.root.color == Color.BLACK }

    spec public boolean redsChildren() {
	all Node n : nodes() | (n.color == Color.BLACK || 
				all Node c : n.children() | c.color == Color.BLACK)
    }

    spec public boolean eqBlacks() {
	all Node l1 : leaves() | 
	    all Node l2: leaves() |
	        (l1 == l2 || l1.blackAncestors().size() == l2.blackAncestors().size())
    }

    spec public boolean isAcyclic() { 
	no Node n | (n.descendants().contains(n))
    }

    spec public boolean parentDef() {
	all Node n | all Node p |
	    (((!p.children().contains(n) || n.parent == p)) &&
	     (n.parent != p || p.children().contains(n)))
    }

    spec public boolean isValidBinarySearch() {
       all Node n | ((n.left == null  || all Node lc : n.leftSubtree()  | lc.value < n.value) &&
        	     (n.right == null || all Node rc : n.rightSubtree() | rc.value > n.value))
    }

    public void insert(Integer value) {
        Node insertedNode = new Node(value, Color.RED, null, null);
	insert(insertedNode);
    }

    public void insert(Node insertedNode)
	modifies fields RBTree.root, Node.color, Node.left, Node.right, Node.parent
	modifies objects getAffectedNodesOnInsert(insertedNode)
	ensures this.nodes().equals(this.old.nodes().plus(insertedNode)) {

	System.out.println("adding " + insertedNode.value);

	// no implementation...
	if (!TEST_DELETE)
	    assert nodes().size() != MAX_SIZE - 1;

	if (root == null) {
	    root = insertedNode;
	} else {
	    Node n = getNewNodeParent(insertedNode);		
	    insertedNode.parent = n;
	}
	insertCase1(insertedNode);
    }    

    public void delete(Integer value)
	modifies fields RBTree.root, Node.color, Node.left, Node.right, Node.parent
	modifies objects getAffectedNodesOnDelete(value)
	ensures this.nodeValues().equals(this.old.nodeValues().minus(value)) {
	// no implementation...
	System.out.println("deleting: " + value);
    } 

    private static Color nodeColor(Node n) {
        return n == null ? Color.BLACK : n.color;
    }

    private HashSet<Object> getAffectedNodesOnInsert(Node node) {
	HashSet<Object> res = new HashSet<Object>();
	res.add(node);
	if (root != null) {
	    Node n = getNewNodeParentToBe(node);
	    node.parent = n;
	    res.add(n);
	    getAffectedNodesOnInsert1(node, res);
	}
	return res;
    }

    private HashSet<Object> getAffectedNodesOnDelete(Integer value) {
	HashSet<Object> res = new HashSet<Object>();
	Node node = lookupNode(value);
	res.add(node);
	if (node.parent != null)
	    res.add(node.parent);
        if (node.left != null && node.right != null) {
            // Copy key/value from predecessor and then delete it instead
            Node pred = maximumNode(node.left);
            node.value = pred.value;
            node = pred;
	    res.add(pred);
        }

        assert node.left == null || node.right == null;
        Node child = (node.right == null) ? node.left : node.right;
        if (nodeColor(node) == Color.BLACK) {
            node.color = nodeColor(child);
	    getAffectedNodesOnDelete1(node, res);
        }

	return res;
    }

    private Node lookupNode(Integer value) {
        Node n = root;
        while (n != null) {
            int compResult = value.compareTo(n.value);
            if (compResult == 0) {
                return n;
            } else if (compResult < 0) {
                n = n.left;
            } else {
                n = n.right;
            }
        }
        return n;
    }

    public void print() {
        printHelper(root, 0);
	System.out.println("---------------------------------------" + 
			   (root == null ? 0 : nodes().size()) + " nodes");
    }

    private static void printHelper(Node n, int indent) {
        if (n == null) {
            System.out.println("<empty tree>");
            return;
        }
        if (n.right != null) {
            printHelper(n.right, indent + INDENT_STEP);
        }
        for (int i = 0; i < indent; i++)
            System.out.print(" "); 
        if (n.color == Color.BLACK)
            System.out.println(n.value);
        else
            System.out.println("R" + n.value);
        if (n.left != null) {
            printHelper(n.left, indent + INDENT_STEP);
        }
    }

////

    public Node getNewNodeParent(Node insertedNode) {

	Node n = root;
	Integer value = insertedNode.value;
	while (true) {
	    int compResult = value.compareTo(n.value);
	    if (compResult == 0) {
		if (insertedNode != null) {
		    n.value = value;
		}
		return n;
	    } else if (compResult < 0) {
		if (n.left == null) {
		    if (insertedNode != null) {
			n.left = insertedNode;
		    }
		    break;
		} else {
		    n = n.left;
		}
	    } else {
		assert compResult > 0;
		if (n.right == null) {
		    if (insertedNode != null) {
			n.right = insertedNode;
		    }
		    break;
		} else {
		    n = n.right;
		}
	    }
	}
	return n;
    }

    public Node getNewNodeParentToBe(Node insertedNode) {

	Node n = root;
	Integer value = insertedNode.value;
	while (true) {
	    int compResult = value.compareTo(n.value);
	    if (compResult == 0) {
		return n;
	    } else if (compResult < 0) {
		if (n.left == null) {
		    break;
		} else {
		    n = n.left;
		}
	    } else {
		assert compResult > 0;
		if (n.right == null) {
		    break;
		} else {
		    n = n.right;
		}
	    }
	}
	return n;
    }



    private void insertCase1(Node n) {
        if (n.parent == null)
            n.color = Color.BLACK;
        else
            insertCase2(n);
    }

    private void insertCase2(Node n) {
        if (nodeColor(n.parent) == Color.BLACK)
            return; // Tree is still valid
        else
            insertCase3(n);
    }

    void insertCase3(Node n) {
        if (nodeColor(n.uncle()) == Color.RED) {
            n.parent.color = Color.BLACK;
            n.uncle().color = Color.BLACK;
            n.grandparent().color = Color.RED;
            insertCase1(n.grandparent());
        } else {
            insertCase4(n);
        }
    }

    void insertCase4(Node n) {
        if (n == n.parent.right && n.parent == n.grandparent().left) {
            rotateLeft(n.parent);
            n = n.left;
        } else if (n == n.parent.left && n.parent == n.grandparent().right) {
            rotateRight(n.parent);
            n = n.right;
        }
        insertCase5(n);
    }

    void insertCase5(Node n) {
        n.parent.color = Color.BLACK;
        n.grandparent().color = Color.RED;
        if (n == n.parent.left && n.parent == n.grandparent().left) {
            rotateRight(n.grandparent());
        } else {
            assert n == n.parent.right && n.parent == n.grandparent().right;
            rotateLeft(n.grandparent());
        }
    }

    private void rotateLeft(Node n) {
        Node r = n.right;
        replaceNode(n, r);
        n.right = r.left;
        if (r.left != null) {
            r.left.parent = n;
        }
        r.left = n;
        n.parent = r;
    }

    private void rotateRight(Node n) {
        Node l = n.left;
        replaceNode(n, l);
        n.left = l.right;
        if (l.right != null) {
            l.right.parent = n;
        }
        l.right = n;
        n.parent = l;
    }

    private void replaceNode(Node oldn, Node newn) {
        if (oldn.parent == null) {
            root = newn;
        } else {
            if (oldn == oldn.parent.left)
                oldn.parent.left = newn;
            else
                oldn.parent.right = newn;
        }
        if (newn != null) {
            newn.parent = oldn.parent;
        }
    }

    private static  Node maximumNode(Node n) {
        assert n != null;
        while (n.right != null) {
            n = n.right;
        }
        return n;
    }

    private void getAffectedNodesOnInsert1(Node n, HashSet<Object> res) {
        if (n != root)
            getAffectedNodesOnInsert2(n, res);
    }

    private void getAffectedNodesOnInsert2(Node n, HashSet<Object> res) {
        if (nodeColor(n.parent) == Color.BLACK)
            return; // Tree is still valid
        else
            getAffectedNodesOnInsert3(n, res);
    }

    void getAffectedNodesOnInsert3(Node n, HashSet<Object> res) {
        if (nodeColor(n.uncle()) == Color.RED) {
	    res.add(n.parent);
	    res.add(n.uncle());
	    res.add(n.grandparent());
            getAffectedNodesOnInsert1(n.grandparent(), res);
        } else {
            getAffectedNodesOnInsert4(n, res);
        }
    }

    void getAffectedNodesOnInsert4(Node n, HashSet<Object> res) {
	if (n.parent != null) 
	    res.add(n.parent);
	if (n.grandparent() != null) 
	    res.add(n.grandparent());
	if (n.parent.grandparent() != null) 
	    res.add(n.parent.grandparent());

        if (n == n.parent.right && n.parent == n.grandparent().left) {
	    res.add(n.parent.left);
	    if (n.left != null) 
		res.add(n.left);
	    if (n.right != null) 
		res.add(n.right);
        } else if (n == n.parent.left && n.parent == n.grandparent().right) {
	    res.add(n.parent.right);
	    if (n.left != null) 
		res.add(n.left);
	    if (n.right != null) 
		res.add(n.right);
        }

    }

    private void getAffectedNodesOnDelete1(Node n, HashSet<Object> res) {
        if (n.parent == null)
            return;
        else
            getAffectedNodesOnDelete2(n, res);
    }

    private void getAffectedNodesOnDelete2(Node n, HashSet<Object> res) {
        if (nodeColor(n.sibling()) == Color.RED) {
	    res.add(n.parent);
	    res.add(n.sibling());
            n.parent.color = Color.RED;
            n.sibling().color = Color.BLACK;
	    res.add(n.left);
	    res.add(n.right);

            if (n == n.parent.left)
		res.add(n.parent.left);
            else
		res.add(n.parent.right);
        }
        getAffectedNodesOnDelete3(n, res);
    }

    private void getAffectedNodesOnDelete3(Node n, HashSet<Object> res) {
        if (nodeColor(n.parent) == Color.BLACK &&
            nodeColor(n.sibling()) == Color.BLACK &&
            nodeColor(n.sibling().left) == Color.BLACK &&
            nodeColor(n.sibling().right) == Color.BLACK)
        {
	    res.add(n.sibling());
            getAffectedNodesOnDelete1(n.parent, res);
        }
        else
            getAffectedNodesOnDelete4(n, res);
    }

    private void getAffectedNodesOnDelete4(Node n, HashSet<Object> res) {
        if (nodeColor(n.parent) == Color.RED &&
            nodeColor(n.sibling()) == Color.BLACK &&
            nodeColor(n.sibling().left) == Color.BLACK &&
            nodeColor(n.sibling().right) == Color.BLACK)
        {
	    res.add(n.sibling());
	    res.add(n.parent);
        }
        else
            getAffectedNodesOnDelete5(n, res);
    }

    private void getAffectedNodesOnDelete5(Node n, HashSet<Object> res) {
        if (n == n.parent.left &&
            nodeColor(n.sibling()) == Color.BLACK &&
            nodeColor(n.sibling().left) == Color.RED &&
            nodeColor(n.sibling().right) == Color.BLACK)
        {
	    res.add(n.sibling());
	    res.add(n.sibling().left);
	    res.add(n.sibling().right);
	    res.add(n.sibling().parent.right);
        }
        else if (n == n.parent.right &&
                 nodeColor(n.sibling()) == Color.BLACK &&
                 nodeColor(n.sibling().right) == Color.RED &&
                 nodeColor(n.sibling().left) == Color.BLACK)
        {
	    res.add(n.sibling());
	    res.add(n.sibling().left);
	    res.add(n.sibling().right);
	    res.add(n.sibling().parent.left);
        }
        getAffectedNodesOnDelete6(n, res);
    }

    private void getAffectedNodesOnDelete6(Node n, HashSet<Object> res) {
	res.add(n.sibling());
	res.add(n.parent);
        if (n == n.parent.left) {
            assert nodeColor(n.sibling().right) == Color.RED;
	    res.add(n.sibling().right);
	    res.add(n.parent.left);
	    res.add(n.parent.right);
	    res.add(n.parent.parent.left);
        }
        else
        {
            assert nodeColor(n.sibling().left) == Color.RED;
	    res.add(n.sibling().left);
	    res.add(n.parent.left);
	    res.add(n.parent.right);
	    res.add(n.parent.parent);
	    res.add(n.parent.parent.right);

        }
    }




////
        
    public static void main(String[] args) {
	//LogMap.SolverOpt_debugLevel(1);
	//LogMap.SolverOpt_SymmetryBreaking(20);
	MAX_SIZE = 20;
	ESJInteger.setBounds(0,MAX_SIZE-1);
	TEST_DELETE = false;

	Random rand = new Random(1111L);

        RBTree t = new RBTree();
        t.print();

	// create an array of the given size
	int[] a = new int[MAX_SIZE];
	  	
	for (int i = 0 ; i < MAX_SIZE; ++i)
	    a[i] = i;

	// randomly shuffle the elements in the array and 
	// insert them in the tree	
	// then remove all from top
	for (int i = MAX_SIZE; i>0; --i) {
	    int n = rand.nextInt(i);
	    int temp = a[n];
	    a[n] = a[i-1];
	    t.insert(temp);
	    t.print();
	}
	if (TEST_DELETE) {
	    for (int i = MAX_SIZE - 1; i>=0; --i) {
		t.delete(i);
		t.print();
		i = 0; // fixme
	    }
	}

    }
    
}

