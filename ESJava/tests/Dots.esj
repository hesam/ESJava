import polyglot.ext.esj.primitives.*;
import polyglot.ext.esj.tologic.LogMap;
import java.util.HashSet;
  
import java.awt.*;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;


public class Dots extends Canvas implements MouseListener, MouseMotionListener {
    
    public Dots() { 
	super(); 
	this.dots = new ESJList<Dot>();
	this.minDistance = 5;
	this.maxWiggleRoom = 4;
    }
    
    static int grid = 10;
    static int canvasSize = 600;
    static int minDistance = 5;
    static int maxWiggleRoom = 4;
    static int dotSize = 20;
    static Color[] colors = {Color.black, Color.blue, Color.darkGray, Color.gray, Color.red, Color.magenta, Color.orange, Color.pink, Color.yellow};

    spec ESJList<Dot> dots;
    Graphics g;

    spec public boolean distributed() { 
	all Dot d1 : this.dots | 
	    all Dot d2 : this.dots | (d1 == d2 || 
				 (d1.x >= d2.x && d1.x - d2.x > Dots.minDistance) || 
				 (d2.x >= d1.x && d2.x - d1.x > Dots.minDistance) ||
				 (d1.y >= d2.y && d1.y - d2.y > Dots.minDistance) ||  
				 (d2.y >= d1.y && d2.y - d1.y > Dots.minDistance))
    }

    spec public boolean unperturbed() { 
	all Dot d : this.dots |
	    (((d.xOrig >= d.x && d.xOrig - d.x < Dots.maxWiggleRoom) || 
	     (d.x >= d.xOrig && d.x - d.xOrig < Dots.maxWiggleRoom)) && 
	     ((d.yOrig >= d.y && d.yOrig - d.y < Dots.maxWiggleRoom) || 
	      (d.y >= d.yOrig && d.y - d.yOrig < Dots.maxWiggleRoom)))
    }

    spec public ESJSet<Dot> surrounds(Dot d) {
	{ Dot d1 | (((d1.x >= d.x && d1.x - d.x <= Dots.minDistance) ||
		     (d.x >= d1.x && d.x - d1.x <= Dots.minDistance)) &&
		    ((d1.y >= d.y && d1.y - d.y <= Dots.minDistance) ||
		     (d.y >= d1.y && d.y - d1.y <= Dots.minDistance))) }
    }

    public void mousePressed( MouseEvent e ) { ; }    
    public void mouseDragged( MouseEvent e ) { ; }
    public void mouseClicked( MouseEvent e ) { ; }
    public void mouseEntered( MouseEvent e ) { ; }
    public void mouseExited( MouseEvent e ) { ; }
    public void mouseMoved( MouseEvent e ) { ; }
    
    public void mouseReleased( MouseEvent e ) {
	int x = (int) Math.floor(e.getX() / grid), y = (int) Math.floor(e.getY() / grid);
	Dot d = new Dot(x, y);
	dots.add(d);
	System.out.println("surroundings: " + surroundsTransitiveClosure(d));
	addDot(d);
	draw();
    }

    public void addDot(Dot d) 
	modifies fields Dot.x, Dot.y
	modifies objects surroundsTransitiveClosure(d)
	ensures distributed() && unperturbed() {
	System.out.println(Dot.allInstances());
	System.out.println(dots);
	System.out.println("distributed: " + distributed());
	System.out.println("unperturbed: " + unperturbed());
    }

    public void draw() {
	int i = 0;
	int m = maxWiggleRoom * 2 * grid;
	paint(g);
	for (Dot d : this.dots) {
	    g.setColor(colors[i++]);
	    g.fillOval(d.x * grid, d.y * grid, dotSize, dotSize);
	    g.drawRect((d.xOrig - maxWiggleRoom) * grid, (d.yOrig - maxWiggleRoom) * grid, m, m);
	    if (i == colors.length)
		i = 0;
	}
    }

    public void init() {
	this.g = getGraphics();
	paint(g);
    }

    public HashSet<Dot> surroundsTransitiveClosure(Dot d) {
	int x = d.x, y = d.y;
	
	HashSet<Dot> res = new HashSet<Dot>();
        HashSet<Dot> unExpanded = new HashSet<Dot>();

        unExpanded.add(d);
	Dot n;
	while (unExpanded.size() > 0) {
	    System.out.println(unExpanded);
	    n = unExpanded.iterator().next();
	    res.add(n);            
	    unExpanded.addAll(surrounds(n));
	    for (Dot d1 : res)
		unExpanded.remove(d1);
	}
        return res;	
    }
    
    public static void main( String[] args ) {
	LogMap.SolverOpt_debugLevel(1);
	ESJInteger.setBounds(0,(canvasSize-100)/grid);
	Frame myFrame = new Frame( "Distributed Dots" );
	Dots myCanvas = new Dots();
	myCanvas.addMouseListener( myCanvas );
	myCanvas.addMouseMotionListener( myCanvas );
	myFrame.add( myCanvas );
	myFrame.setSize( canvasSize, canvasSize );
	myFrame.setVisible(true);
	myCanvas.init();
	myFrame.addWindowListener( new WindowAdapter() {
		public void windowClosing( WindowEvent we ) {
		    System.exit( 0 );
		}
	    } );
    }
}
